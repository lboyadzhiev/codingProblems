JS
    PRIMITIVE VS. REFERENCE TYPES

        Primitive data types 

            - Number;
            - String;
            - Boolean;
            - Undefined;
            - Null;
            - Symbol;
            - BigInt;
        
        Reference data types 

            - Objects:
                - Object literal;
                - Arrays;
                - Functions;
                - ect...

        Copying objects

            For coppying an object we can use function "Obejct.assign"; We can use this function to merge two objects. The way we do coppying is to merge empty new object with the object that we want to coppy.

                <script>

                    const objOne = {
                        firsName: 'John',
                        lastName: 'Williams',
                        age: 30,
                    }

                 const objCoppy = Object.assign({}, objOne);
                </script>
            
            The problem here is that, the 'Object.assign' works only for first level, that means, if we have object in the object the inner one goin to be the same (same place to the memory). 
            "Object.assign" creates a shalow coppy not deep one.

                !!!    How to create a deep clone!!!

        Js Engine

            The JS Engine has two components: 
             
                - Call Stack;
                    Where functions are executed, and primitive types are stored. Here execution context run.

                    When we declare a primitive type JS creates a unique identifier call variable name, then a piece of memory will be alocated with a certain address, then the value will be stored in memory with the specifyed address.
                    !! Identifier point to the addres not to the value. Adress is imutable, so it can't be changed. If we change the value of the variable it create new address where it is stored.

                - Heap;
                    Reference type are stored in memory. When a new object is created it is stored in the HEAP. And such as before there is memory address and value. The object identifieer does not point to directly in memory address in the Heap, instead it is point to the new piece of memory created in the STACK. and then this piece of memory point to the object address in the HEAP, by usin a memory address as it's value. 
                    The piece of memory in the callStack has the piece of memory in the Heap wich holdes the object. That is becouse the objects can be a large the heap is unlimited.

            

    OBJECTS ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Everything in JS is object.

        WHAT IS OBJECT?
            An object is a collection of fields, and a field is an association between a name(or key) and value.
            A filed's value can be a fucntion, in which case it is known as method.
            Objects are a reference data type, safe in HEAP.
        
        DEFINING OBJECTS  

            1. create a JS object with an "object literal {}"

                    let object = {key: value, key: value};
                
        ASSIGNING AND ACCESSING PROPERTIES (key or value)
 
            1. Simple dot-notation

                let object = {};
                object.key = value;
            
            2. Bracket-notation 

                object["key"] = value; 

                ! Use it when we have spaces in key.

        OBJECT METHODS

            Methods are actions that can be performed on objects.
            Methods are stored in properites as fucntion definition.

            ! We can't use lambda function, in JS this type of functions have explicity assignment this and it can't be changed. 


            let object = {
                keyOne: valueOne,
                keyTwo: valueTwo,
                keyThree: fucntion () {
                    return this.keyOne + '' + this.keyTwo;
                }
            }
            
            console.log(object.keyThree()); // valueOne valueTwo

        DESCTRUCTURING OBJECTS

            For this purpoce we use "{ }" inside we write varables. 

                <script>

                    const { keyOne, keyTwo } = object;

                </script>
            
            This way the names are the same names from the object!

            If we want different name doint this way:

                <script>

                    const { keyOne: variableName, keyTwo: variableName } = object;

                </script>

            Here we can set a default value. In case we don't have key that we specify, we set a default value otherways it going to give us "undefined".

                <script>

                    const { keyFour = [], keyOne: varableName = []} = object;

                </script>

            Mutating variable while desctructuring.

                <script>

                    let a = 111;
                    let b = 999;
                    const obj = { a: 23, b: 7, c: 14 };

                    { a, b } = obj; // wrong

                    ({ a, b } = obj);

                </script>

                If we start a row with "{}' JS expect a codeblock, and we cannot assign anythinbg to a codeblock, thats way we have "Unexpected token", to solve this we just wrap evetything in "()";

            Nested Objects

                <script>

                    const obj = {
                        keyOne: valueOne,
                        keyTwo: valueTwo,
                        keyThree: {
                            keyFour: {
                                newKeyOne: newValueOne,
                                newKeyTwo: newValueTwo,
                            },

                            keyFive: {
                                newKeyOne: newValueOne,
                                newKeyTwo: newValueTwo,
                            }
                        }
                    }

                    const { keyFour: { open, close } } = keyThree; 
                </script>

                The properties inside should be the sama as in object.

        WHAT IS "this" KEYWORD

            In JS 'this' means context. This context is execution. Every function in JS has execution context and execution scope(lexical scope). The 'this' keyword refers to the current object the code is being written inside. This will always ensure that the correct values are used when a member's context changes. Arrow functions does not get own "this" keyword! The arrow function use lexical "this" that mean it use the "this" keyword from the parent scope. 

                <script>
                    const objOne = {
                        kyeOne: valueOne,
                        keyTwo: valueTwo,
                        method: function () {
                            console.log(this.keyOne - this.keyTwo);
                        }
                    }

                    objOne.method();

                    const objTwo = {
                        keyOne: vlaueOne,
                        keyTwo: valueTwo
                    }

                    objTwo.method = objOne.method;

                    objTwo.method();
                </script>

            The "this" keyword will point to the object that is calling the method.  In this example the objTwo is calling the mothod, so the "this" keyword that is isnide the method is pointing to the objTwo keys.
            If we have fucntion in method, the "this" keyword does not work in the function, so we can solve this problem by making a variable outside the fucntion wich is equal to 'this', ot we can use an Arrow Fucntion (the arrow function does not have own "this" keyword, and use "this" from the parent scope).

            NOTE:Wen we coppy one method to another we don't call it "()".

        COMPARING OBJECTS

            Two variables, two distinct objects with the same properites.

                let objectOne = {keyOne: "valueOne"};
                let objectTwo = {keyTwo: "valueTwo"};

                objectOne == objectTwo; // return false

            Two variables, a singe object

                let objectOne = {keyOne: "valueOne"};
                let objectTwo = objectOne; // Assign objectOne reference to objectTwo

                Here the two variables are pointing to same object

                objectOne == objectTwo; // return true

        INTERNAL PROPERTIES

            Every object field has four properites:

                1. Enumerable - can access to all of them using a for...in loop. Also, enumerable property keys of an object are returned using "Object.keys" method;
                2. Configurable - can modify the behavior of the property, so you can make them non-enumerable, non-writeble or even non-configurable;
                    -- We can delete only configurable properites;
                3. Writable - can modify their values and update a property just assigning a new value to it;
                4. Value 


                    let obj = {};

                    Object.defineProperties (
                        obj,
                        {
                            "key": {
                                get: () => {  },
                                set: () => {  },
                                //configurable: true,
                                //enumerable:false,
                                //writeble: false,
                                //value: some value
                            }
                        }
                    )

                "get" "set"

                "set" - can be only fucntion that have param
                "get" - can be fucntion as well


        LOOPING THROUGH OBJECTS

             Objects are looping through keys.

             "Object keys" - we take the keys, return Array. It is good practise when we take the keys from object to check if they are keys from this object "hasOwnProperty". 

             "Object values" - return values from the object.

             "for...in Loop" - iterates a specified variable over all the enumerable properites of an object.
             "for...of Loop" - creates a loop iterating over iterable objects.

        JSON

            A common use of JSON is to read data from a web server, and display the data in a web page.

            PARSING FROM STRINGS

                Use JS built-in function "JSON.parse()" to convert the string into a JS object.

                let obj = JSON.parse(text);

            CONVERT TO STRING

                Use "JSON.stringify()" to convert objects into a string.

                let obj = {key: value}
                let objJSON = JSON.stringify(obj);

                we can do the same for arrays.

        ! rownd to the second number  - Math.floor(value * 100) / 100;





    We can't add "removeEventListener" to a function, so we make variable.

        Debugging in Chrome 

            1. open devtools - ctr + shift + j
            2. click "Sources";

        what is "bind"?

            1. Bind an object to a function;
            2. Reference it using 'this';

    FUNCTIONS //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        Functions are one of the fundamental building blocks in JS. A fucntion in JS is similar to a procedure - a set of statements that performs a task, take some input and return an output where there is some abvious relationship between the input and the output. To use a fucntion, we must define it somewhere in the scope from which we wish to call it.

            -- Fucntion Declaration

                The fucntion declaration defines a fucntion with the specified parameters.

                    <script>

                        fucntion name(params) {
                            [statements]
                        }

                    </script>

                "name" - the fucntion name;

                "params" - optional. The name of an argument to be passed to hte fucntion.

                "statements" - the statements which comprise the body of the fucntion.

                A fucntion created with a fucntion declaration is a Function object and has all the porperties, methods and behavior of Fucntion object.

                By default, fucntions return 'undefined'. To return any other value, the fucntion must have a 'retur' statement that specifies the value to return.

                Hoisting!!!

                    Function declaration in JS are hoisted to the top of the enclosing fucntion or global scope. That is mead we can use the function before we declare it.
            

            -- Function Expression

                A fucntion Expression is very similar to and almost the same syntax as fucntion declaration. The main difference is the function name. which can be omitted in fucntion expression to create anonymous fucntions.

                    const name = fucntion(param) {
                        statements
                    }

                Hoisting!!!

                    Fucntion expression in JS are not hoisted. We can't use fucntion expression before we create them.

            -- Arrow Function   

                Comparing traditional functions to arrow functions.

                    // Traditioanl Anonymous Function

                        <script>

                            function (a) {
                                return a + 100;
                            }

                        </script>

                    // Arrow fucntion break down

                        // 1. Remove the word "function" and pleace arrow between the argument and opening body bracket:

                            <script>

                                (a) => {
                                    return a + 100;
                                }

                            </script>

                        // 2. Remove the body braces and word "return" -- the return in implied.

                            <script>
                                (a) => a + 100;
                            </script>

                        // 3. Remove the argument parantheses

                            <script>
                                a => a + 100;
                            </script>

                        The { braces } and (parantheses) and "return" are required in some cases. 
                            - If we have multiple arguments, we will need to re-introduce parantheses around the arguments.
                            - If the body requires additional lines of processing, we will need to re-introduce braces plush the "return".

                                <script>
                                    (a, b) => {
                                        let chuck = 42;
                                        return a + b + chuck;
                                    }
                                </script>
                        
                        For named fucntions we treat arrow expressions like varibales:

                            <script>
                                let bob = a => a + 100;
                            </script>

                        To return an object literal expression requires parentheses around expression:

                            <script>
                                params => ({foo: "a"});
                            </script>

                        Rest parameters are supported: 

                            (a,b, ...r) => expression;
                        
                        Default parameters are supported:

                            (a=400, b=20, c) => expression;

                        Destructuring within params supported:

                            ([a, b] = [10, 20]) => a + b; // result is 30;
                            ({ a, b } = { a: 10, b:20 }) => a + b; // result is 30;

                        Arrow function is not ok for methods, it has no own "this" keyword. Use his parrent 'this'.


    Arrays

        Desctructuring Arrays   

            Meaning - unpacking value in array to a variables. Desctructuring does not affect the original array, we need to specify the variables in [] with declaration(let, const);



                <script>
                    const arr = [1, 2, 3];

                    const [x, y, z] = arr;
                </script>
            
            If we want to take elements that are not in the row. I just make a hole between the element until we reach the disered one.

                <script>
                    const arr = [1, 2, 3];
                    const [x, , z] = arr;
                </script>
            
            Switching variables with Destructuring 

                [x, z] = [z, x];

                We don't nead declare them again.
            
            Nested Arrays

                <script>
                    const nested = [2, 4, [5, 6]];

                    const [i, , [j, k]] = nested;
                </script>

            We can use Destructuring in Destructuring;

            We can write default values for 


    Spread operator

        Take all elements out of the array and write it manualy. We use it whenever we want an elements of the array individually. Only when pass an argument to a function and build a new array.
        It look like the desctructuring, but the difference is that the spread operator take out all elements of the array and does not create new variables. And we used in placed that we need onlu values separeted by commas.

        The spread operator works with all iterables(arrays, strings, maps, sets, NOT objects).

    Rest Patterns and Parameters 

        Rest pattern looks exactly like spread operator '...', but it actualy do the oposite of the spread operator. The spread operator unpack elements from an arrya, while rest operator pack the elements into array. The 'rest patterns' are locatet on the left side of the '='.

        The 'rest pattern' always must be the last in desctructuring assign.

        We can use REST to collect object too.

        ! The REST take multiple values and pack the out in an array.

    
    LOGICAL OPERATORS
         Short Circuiting (&& and ||);


        Logical operators can be used not only with booleans.
            - They can use any data type;
            - They can return any data type;
            - And they do something called 'short circuiting';

                'OR' operator
                    console.log(3 || 'string");
                    console.log('' || 'string');
                    console.log(true || 0);
                    console.log(undefined || null);

                    If the first value is truthy, then the second one will not be avalueted.

                    '??' this operator works with nullish values, and in case we have '0' as value it will print it in.

                'AND' operator
                    console.log(0 && 'String')

                    'End' operator short circuites when the first value is false. And return that false value without evalueted the rest ones. When all of the values are thuthy it return the last one.

        It is not good idea to replace all if else statements with this operator, because the code is become hard to read!!!


    LOGICAL ASSIGNMENT OPERATORS

    LOOPING OBJECTS: OBJECT KEYS, VALUES, AND ENTRIES

        over property names

            "Object.keys(objectName)" - returns an array with the keys from the object;

        Over property values;

            'Object.values(objectName) - returns an array with the values from the object;

        Overt the entire object (key + values);

            'Object.entries(objectName)" - tranfrom the object into an array and return keys and values from the obects

        

    SETS

        Set is a collection with unique values. Than means that set they never have dublicates. We can not retrieave data from the set, like we do in the array, that is becouse in SETS there is no indexes. Base use case in to remove dublicate value from array.

    MAPS: FUNDAMENTALS

        MAPS is a data sctructure that we can use to map values into a keys. Just like in an object thata is stored in key: value pairs. The difference is that the keys in maps can have any types. In object the keys can be only strings.

        The easiest way to create a map is, to creata an empty map, and then we fille id.
        We use '.set' method to fill up the map. and we pass two arguments - the key and the value. This method 'set' don't just full up the map and also return the updated map, that is calling to.
        We can chain the set
    
    MAPS: ITERATION

    WHICH DATA STRUCTURE TO USE?

        Sourced of Data:
            1. From the program itself: Data written directly in source code;
            2. From the UI: Data input from the user or data written in DOM;
            3. From external sources: Data fetched for example from we API;

        All of this data is called collection of data, and we use data structure to store it, how to choose;

            1. Simple list? - Arrays or Sets;
                1.1. Arrays
                    - Use when we need ordered list of values (maiht contain dublicates);
                    - Use when we need to manipulate data;
                1.2. Sets:
                    - Use when we need to work with unique values;
                    - Use when high-performance is really important;
                    - Use to remove duplicates from arrays;

            2. Key / Value pairs? - Objects or Maps;
                2.1. Objects:
                    - More 'traditional' key/value store ('abused' objects);
                    - Easier to write and access values wiht '.' and '[]';
                    - Use when we need to include fucntions(methods);
                    - Use when working with JSON(can convert to map);
                2.2 Maps:
                    - Better performance;
                    - Keys can have any data type;
                    - Easy to iterate;
                    - Easy to compute size;
                    - Use when we simply need to map key to values;
                    - Use when we need keys that are not strings;


    STRINGS

        We can search characters like we do in an array.

        Methods: 

            -- indexOf() 
                Returns the first index at which a given element can be found;

            -- slice() 
                Returns a shallow copy of a portion of an array / string into a new array object selected from start to end (end not included) where start and end represent the index of items in that array / string. The original array / string will not be modified. The length of the new array / string going to be the endIndex minus startIndex.

            -- replace() 
                Returns a new string with some or all matcher of a pattern replaced by a replacement. Replace method is case sensitive. The pattern can be a string of a RegExp, and the replacement can be a string or a fucntion to be called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged!!!

            -- includes()
                Determines whether an array includes a certain value among its entries, returning true of false as appropirate.
            -- startsWith()
                determines whether a string begins with the characters of a specified string, retutning boolean.

            -- split()
                divides a String into an ordered list of substrings, puts these substrings into an array, and return the array. The division done by searching for a pattern, where the pattern is provided as the first parameter in the method's call.
            
            -- join()
                Creates and returns a new string by concatenating all of the elements in an array, separated by commas or a specified separator string.
            
            -- padStart()
                Pads the current string with another string (multiple times, if needed) until the RESULT string reaches the given length. The padding is applied from the start of the current string.

            -- padEnd()
                Pads the current string with a given string so that the resulting string reaches a given length.
            
